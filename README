RISC-V CPU Core in VHDL
=======================

Copyright (C) 2025  Your Name

This file is part of the RISC-V CPU project.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Overview
--------

This project implements a **RISC-V CPU core** in VHDL suitable for FPGA prototyping
and educational purposes. The design currently supports the **RV32I base integer instruction set**,
with modular architecture that allows easy extension to RV32IM (multiply/divide), pipeline stages,
and peripheral interfaces.

Features
--------

- Single-cycle or pipelined RV32I CPU core
- Modular design: separate components for ALU, Register File, PC, Control Unit, Immediate Generator
- Optional support for Multiply/Divide (RV32M) and Control and Status Registers (CSR)
- Instruction and data memory interfaces (easily replaced with on-chip RAM or external blocks)
- Testbenches for all main modules for simulation
- Fully commented VHDL code in GNU style


Usage
-----

1. **Simulation:**  
   - Use GHDL, ModelSim, or other VHDL simulators to compile the `hdl` and `tb` directories.  
   - Run the testbenches (e.g., `tb_riscv_core.vhd`) to verify functionality.

2. **Synthesis:**  
   - Target an FPGA (Xilinx, Intel/Altera, Lattice).  
   - Replace the instruction and data memory interfaces with block RAMs or external memory.

3. **Program Loading:**  
   - Compile RISC-V assembly or C programs into a `.hex` or `.bin` format.  
   - Load them into the instruction memory for simulation or FPGA execution.

Extensions
----------

- Implement a full 5-stage pipeline with hazard detection and forwarding
- Add Multiply/Divide instructions (RV32M)
- Add compressed instructions (RV32C)
- Add floating-point unit (RV32F/D)
- Connect peripherals through AXI4/Wishbone bus
- Integrate accelerators (e.g., TPU or DSP)  

References
----------

- RISC-V Instruction Set Manual: https://riscv.org/technical/specifications/
- IEEE 1076-2019 VHDL Standard: https://standards.ieee.org/standard/1076-2019.html
- FPGA vendor documentation (Xilinx, Intel, Lattice)

IF ──► ID ──► EX ──► MEM ──► WB
 │       │      │      │      │
 │       │      │      │      └──► Register File (Write)
 │       │      │      └────────► Data Mem
 │       │      └──────────────► ALU/MUL/DIV
 │       └─────────────────────► Decode + ImmGen
 └────────────────────────────► Instr Mem